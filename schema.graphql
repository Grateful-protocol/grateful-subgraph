type Profile @entity {
  id: Bytes!
  owner: Bytes!
  salt: Bytes!
  address: Bytes!
  tokenId: BigInt!
  subscriptions: BigInt!
  subscribers: BigInt!
  permissions: [ProfilePermission!]! @derivedFrom(field: "profile")
}

type Vault @entity {
  id: Bytes!
  address: Bytes!
  minRate: BigInt!
  maxRate: BigInt!
  paused: Boolean!
}

type Balance @entity {
  id: Bytes!
  vault: Vault!
  profile: Profile!
  amount: BigInt!
  flow: BigInt!
  inflow: BigInt!
  outflow: BigInt!
  lastUpdate: BigInt!
  liquidationTime: BigInt
}

type GratefulSubscription @entity {
  id: Bytes!
  giver: Profile!
  creator: Profile!
  vault: Vault
  rate: BigInt
  feeRate: BigInt
  lastUpdate: BigInt!
  historyCounter: BigInt!
  histories: [SubscriptionHistory!]! @derivedFrom(field: "subscription")
}

type SubscriptionHistory @entity {
  id: Bytes!
  subscription: GratefulSubscription!
  vault: Vault
  rate: BigInt!
  feeRate: BigInt!
  from: BigInt!
  to: BigInt
}

type ProfilePermission @entity {
  id: Bytes!
  profile: Profile!
  user: Bytes!
  permissions: [Bytes!]!
}

type LiquidatedSubscription @entity {
  id: Bytes!
  giver: Profile!
  creator: Profile!
  liquidator: Profile!
  vault: Vault!
  subscription: GratefulSubscription!
  reward: BigInt!
  surplus: BigInt!
}
